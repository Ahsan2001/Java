Token	Lexeme	Line No
IDENTIFIER	import	1
IDENTIFIER	java	1
IDENTIFIER	io	1
SYMBOL	*	1
SYMBOL	;	1
IDENTIFIER	import	2
IDENTIFIER	java	2
IDENTIFIER	util	2
SYMBOL	*	2
SYMBOL	;	2
IDENTIFIER	import	3
IDENTIFIER	java	3
IDENTIFIER	util	3
IDENTIFIER	regex	3
SYMBOL	*	3
SYMBOL	;	3
IDENTIFIER	public	5
IDENTIFIER	class	5
IDENTIFIER	Lexer	5
SYMBOL	{	5
IDENTIFIER	private	6
IDENTIFIER	static	6
IDENTIFIER	final	6
IDENTIFIER	Set	6
SYMBOL	<	6
IDENTIFIER	String	6
SYMBOL	>	6
IDENTIFIER	keywords	6
SYMBOL	=	6
IDENTIFIER	new	6
IDENTIFIER	HashSet	6
SYMBOL	<	6
SYMBOL	>	6
SYMBOL	(	6
IDENTIFIER	Arrays	6
IDENTIFIER	asList	6
SYMBOL	(	6
STRING	"if"	6
SYMBOL	,	6
STRING	"else"	6
SYMBOL	,	6
STRING	"while"	6
SYMBOL	,	6
STRING	"for"	6
SYMBOL	,	6
STRING	"int"	7
SYMBOL	,	7
STRING	"float"	7
SYMBOL	,	7
STRING	"char"	7
SYMBOL	,	7
STRING	"return"	7
SYMBOL	)	7
SYMBOL	)	7
SYMBOL	;	7
IDENTIFIER	private	8
IDENTIFIER	static	8
IDENTIFIER	final	8
IDENTIFIER	String	8
IDENTIFIER	identifierRegex	8
SYMBOL	=	8
STRING	"[a-zA-Z_]\\w*"	8
SYMBOL	;	8
IDENTIFIER	private	9
IDENTIFIER	static	9
IDENTIFIER	final	9
IDENTIFIER	String	9
IDENTIFIER	integerRegex	9
SYMBOL	=	9
STRING	"\\d+"	9
SYMBOL	;	9
IDENTIFIER	private	10
IDENTIFIER	static	10
IDENTIFIER	final	10
IDENTIFIER	String	10
IDENTIFIER	stringRegex	10
SYMBOL	=	10
STRING	"\"(?:[^\"\\\\]|\\\\.)*\""	10
SYMBOL	;	10
IDENTIFIER	private	11
IDENTIFIER	static	11
IDENTIFIER	final	11
IDENTIFIER	String	11
IDENTIFIER	charRegex	11
SYMBOL	=	11
STRING	"'(?:[^'\\\\]|\\\\.)'"	11
SYMBOL	;	11
IDENTIFIER	private	12
IDENTIFIER	static	12
IDENTIFIER	final	12
IDENTIFIER	String	12
IDENTIFIER	commentRegex	12
SYMBOL	=	12
STRING	"/\\*.*?\\*/"	12
SYMBOL	;	12
IDENTIFIER	private	13
IDENTIFIER	static	13
IDENTIFIER	final	13
IDENTIFIER	String	13
IDENTIFIER	symbolRegex	13
SYMBOL	=	13
STRING	"[\\[\\]{}(),;=+\\-*/<>!]"	13
SYMBOL	;	13
IDENTIFIER	private	15
IDENTIFIER	static	15
IDENTIFIER	final	15
IDENTIFIER	String	15
IDENTIFIER	combinedRegex	15
SYMBOL	=	15
IDENTIFIER	String	16
IDENTIFIER	join	16
SYMBOL	(	16
STRING	"|"	16
SYMBOL	,	16
IDENTIFIER	commentRegex	16
SYMBOL	,	16
IDENTIFIER	stringRegex	16
SYMBOL	,	16
IDENTIFIER	charRegex	16
SYMBOL	,	16
IDENTIFIER	identifierRegex	16
SYMBOL	,	16
IDENTIFIER	integerRegex	16
SYMBOL	,	16
IDENTIFIER	symbolRegex	16
SYMBOL	)	16
SYMBOL	;	16
IDENTIFIER	private	18
IDENTIFIER	static	18
IDENTIFIER	List	18
SYMBOL	<	18
IDENTIFIER	Token	18
SYMBOL	>	18
IDENTIFIER	analyzeCode	18
SYMBOL	(	18
IDENTIFIER	String	18
IDENTIFIER	fileName	18
SYMBOL	)	18
IDENTIFIER	throws	18
IDENTIFIER	IOException	18
SYMBOL	{	18
IDENTIFIER	List	19
SYMBOL	<	19
IDENTIFIER	Token	19
SYMBOL	>	19
IDENTIFIER	tokens	19
SYMBOL	=	19
IDENTIFIER	new	19
IDENTIFIER	ArrayList	19
SYMBOL	<	19
SYMBOL	>	19
SYMBOL	(	19
SYMBOL	)	19
SYMBOL	;	19
IDENTIFIER	try	20
SYMBOL	(	20
IDENTIFIER	BufferedReader	20
IDENTIFIER	reader	20
SYMBOL	=	20
IDENTIFIER	new	20
IDENTIFIER	BufferedReader	20
SYMBOL	(	20
IDENTIFIER	new	20
IDENTIFIER	FileReader	20
SYMBOL	(	20
IDENTIFIER	fileName	20
SYMBOL	)	20
SYMBOL	)	20
SYMBOL	)	20
SYMBOL	{	20
IDENTIFIER	String	21
IDENTIFIER	line	21
SYMBOL	;	21
KEYWORD	int	22
IDENTIFIER	lineNumber	22
SYMBOL	=	22
INTEGER	0	22
SYMBOL	;	22
KEYWORD	while	23
SYMBOL	(	23
SYMBOL	(	23
IDENTIFIER	line	23
SYMBOL	=	23
IDENTIFIER	reader	23
IDENTIFIER	readLine	23
SYMBOL	(	23
SYMBOL	)	23
SYMBOL	)	23
SYMBOL	!	23
SYMBOL	=	23
IDENTIFIER	null	23
SYMBOL	)	23
SYMBOL	{	23
IDENTIFIER	lineNumber	24
SYMBOL	+	24
SYMBOL	+	24
SYMBOL	;	24
SYMBOL	/	25
SYMBOL	/	25
IDENTIFIER	Tokenize	25
IDENTIFIER	line	25
IDENTIFIER	tokens	26
IDENTIFIER	addAll	26
SYMBOL	(	26
IDENTIFIER	tokenizeLine	26
SYMBOL	(	26
IDENTIFIER	line	26
SYMBOL	,	26
IDENTIFIER	lineNumber	26
SYMBOL	)	26
SYMBOL	)	26
SYMBOL	;	26
SYMBOL	}	27
SYMBOL	}	28
KEYWORD	return	29
IDENTIFIER	tokens	29
SYMBOL	;	29
SYMBOL	}	30
IDENTIFIER	private	32
IDENTIFIER	static	32
IDENTIFIER	List	32
SYMBOL	<	32
IDENTIFIER	Token	32
SYMBOL	>	32
IDENTIFIER	tokenizeLine	32
SYMBOL	(	32
IDENTIFIER	String	32
IDENTIFIER	line	32
SYMBOL	,	32
KEYWORD	int	32
IDENTIFIER	lineNumber	32
SYMBOL	)	32
SYMBOL	{	32
IDENTIFIER	List	33
SYMBOL	<	33
IDENTIFIER	Token	33
SYMBOL	>	33
IDENTIFIER	tokens	33
SYMBOL	=	33
IDENTIFIER	new	33
IDENTIFIER	ArrayList	33
SYMBOL	<	33
SYMBOL	>	33
SYMBOL	(	33
SYMBOL	)	33
SYMBOL	;	33
IDENTIFIER	Matcher	34
IDENTIFIER	matcher	34
SYMBOL	=	34
IDENTIFIER	Pattern	34
IDENTIFIER	compile	34
SYMBOL	(	34
IDENTIFIER	combinedRegex	34
SYMBOL	)	34
IDENTIFIER	matcher	34
SYMBOL	(	34
IDENTIFIER	line	34
SYMBOL	)	34
SYMBOL	;	34
KEYWORD	while	35
SYMBOL	(	35
IDENTIFIER	matcher	35
IDENTIFIER	find	35
SYMBOL	(	35
SYMBOL	)	35
SYMBOL	)	35
SYMBOL	{	35
IDENTIFIER	String	36
IDENTIFIER	lexeme	36
SYMBOL	=	36
IDENTIFIER	matcher	36
IDENTIFIER	group	36
SYMBOL	(	36
SYMBOL	)	36
SYMBOL	;	36
IDENTIFIER	String	37
IDENTIFIER	tokenType	37
SYMBOL	;	37
KEYWORD	if	38
SYMBOL	(	38
IDENTIFIER	lexeme	38
IDENTIFIER	matches	38
SYMBOL	(	38
IDENTIFIER	identifierRegex	38
SYMBOL	)	38
SYMBOL	)	38
SYMBOL	{	38
IDENTIFIER	tokenType	39
SYMBOL	=	39
IDENTIFIER	keywords	39
IDENTIFIER	contains	39
SYMBOL	(	39
IDENTIFIER	lexeme	39
SYMBOL	)	39
STRING	"KEYWORD"	39
STRING	"IDENTIFIER"	39
SYMBOL	;	39
SYMBOL	}	40
KEYWORD	else	40
KEYWORD	if	40
SYMBOL	(	40
IDENTIFIER	lexeme	40
IDENTIFIER	matches	40
SYMBOL	(	40
IDENTIFIER	integerRegex	40
SYMBOL	)	40
SYMBOL	)	40
SYMBOL	{	40
IDENTIFIER	tokenType	41
SYMBOL	=	41
STRING	"INTEGER"	41
SYMBOL	;	41
SYMBOL	}	42
KEYWORD	else	42
KEYWORD	if	42
SYMBOL	(	42
IDENTIFIER	lexeme	42
IDENTIFIER	matches	42
SYMBOL	(	42
IDENTIFIER	stringRegex	42
SYMBOL	)	42
SYMBOL	)	42
SYMBOL	{	42
IDENTIFIER	tokenType	43
SYMBOL	=	43
STRING	"STRING"	43
SYMBOL	;	43
SYMBOL	}	44
KEYWORD	else	44
KEYWORD	if	44
SYMBOL	(	44
IDENTIFIER	lexeme	44
IDENTIFIER	matches	44
SYMBOL	(	44
IDENTIFIER	charRegex	44
SYMBOL	)	44
SYMBOL	)	44
SYMBOL	{	44
IDENTIFIER	tokenType	45
SYMBOL	=	45
STRING	"CHAR"	45
SYMBOL	;	45
SYMBOL	}	46
KEYWORD	else	46
KEYWORD	if	46
SYMBOL	(	46
IDENTIFIER	lexeme	46
IDENTIFIER	matches	46
SYMBOL	(	46
IDENTIFIER	commentRegex	46
SYMBOL	)	46
SYMBOL	)	46
SYMBOL	{	46
IDENTIFIER	tokenType	47
SYMBOL	=	47
STRING	"COMMENT"	47
SYMBOL	;	47
SYMBOL	}	48
KEYWORD	else	48
SYMBOL	{	48
IDENTIFIER	tokenType	49
SYMBOL	=	49
STRING	"SYMBOL"	49
SYMBOL	;	49
SYMBOL	}	50
IDENTIFIER	tokens	51
IDENTIFIER	add	51
SYMBOL	(	51
IDENTIFIER	new	51
IDENTIFIER	Token	51
SYMBOL	(	51
IDENTIFIER	tokenType	51
SYMBOL	,	51
IDENTIFIER	lexeme	51
SYMBOL	,	51
IDENTIFIER	lineNumber	51
SYMBOL	)	51
SYMBOL	)	51
SYMBOL	;	51
SYMBOL	}	52
KEYWORD	return	53
IDENTIFIER	tokens	53
SYMBOL	;	53
SYMBOL	}	54
IDENTIFIER	public	56
IDENTIFIER	static	56
IDENTIFIER	void	56
IDENTIFIER	main	56
SYMBOL	(	56
IDENTIFIER	String	56
SYMBOL	[	56
SYMBOL	]	56
IDENTIFIER	args	56
SYMBOL	)	56
SYMBOL	{	56
IDENTIFIER	Scanner	57
IDENTIFIER	scanner	57
SYMBOL	=	57
IDENTIFIER	new	57
IDENTIFIER	Scanner	57
SYMBOL	(	57
IDENTIFIER	System	57
IDENTIFIER	in	57
SYMBOL	)	57
SYMBOL	;	57
IDENTIFIER	System	58
IDENTIFIER	out	58
IDENTIFIER	print	58
SYMBOL	(	58
STRING	"Enter the name of the source code file: "	58
SYMBOL	)	58
SYMBOL	;	58
IDENTIFIER	String	59
IDENTIFIER	fileName	59
SYMBOL	=	59
IDENTIFIER	scanner	59
IDENTIFIER	nextLine	59
SYMBOL	(	59
SYMBOL	)	59
SYMBOL	;	59
IDENTIFIER	try	60
SYMBOL	{	60
IDENTIFIER	List	61
SYMBOL	<	61
IDENTIFIER	Token	61
SYMBOL	>	61
IDENTIFIER	tokens	61
SYMBOL	=	61
IDENTIFIER	analyzeCode	61
SYMBOL	(	61
IDENTIFIER	fileName	61
SYMBOL	)	61
SYMBOL	;	61
IDENTIFIER	try	62
SYMBOL	(	62
IDENTIFIER	PrintWriter	62
IDENTIFIER	writer	62
SYMBOL	=	62
IDENTIFIER	new	62
IDENTIFIER	PrintWriter	62
SYMBOL	(	62
IDENTIFIER	new	62
IDENTIFIER	FileWriter	62
SYMBOL	(	62
STRING	"output.txt"	62
SYMBOL	)	62
SYMBOL	)	62
SYMBOL	)	62
SYMBOL	{	62
IDENTIFIER	writer	63
IDENTIFIER	println	63
SYMBOL	(	63
STRING	"Token\tLexeme\tLine No"	63
SYMBOL	)	63
SYMBOL	;	63
KEYWORD	for	64
SYMBOL	(	64
IDENTIFIER	Token	64
IDENTIFIER	token	64
IDENTIFIER	tokens	64
SYMBOL	)	64
SYMBOL	{	64
IDENTIFIER	writer	65
IDENTIFIER	println	65
SYMBOL	(	65
IDENTIFIER	token	65
IDENTIFIER	getType	65
SYMBOL	(	65
SYMBOL	)	65
SYMBOL	+	65
STRING	"\t"	65
SYMBOL	+	65
IDENTIFIER	token	65
IDENTIFIER	getLexeme	65
SYMBOL	(	65
SYMBOL	)	65
SYMBOL	+	65
STRING	"\t"	65
SYMBOL	+	65
IDENTIFIER	token	65
IDENTIFIER	getLineNumber	65
SYMBOL	(	65
SYMBOL	)	65
SYMBOL	)	65
SYMBOL	;	65
SYMBOL	}	66
SYMBOL	}	67
IDENTIFIER	System	68
IDENTIFIER	out	68
IDENTIFIER	println	68
SYMBOL	(	68
STRING	"Lexical analysis completed. Results saved in output.txt."	68
SYMBOL	)	68
SYMBOL	;	68
SYMBOL	}	69
IDENTIFIER	catch	69
SYMBOL	(	69
IDENTIFIER	FileNotFoundException	69
IDENTIFIER	e	69
SYMBOL	)	69
SYMBOL	{	69
IDENTIFIER	System	70
IDENTIFIER	out	70
IDENTIFIER	println	70
SYMBOL	(	70
STRING	"File not found."	70
SYMBOL	)	70
SYMBOL	;	70
SYMBOL	}	71
IDENTIFIER	catch	71
SYMBOL	(	71
IDENTIFIER	IOException	71
IDENTIFIER	e	71
SYMBOL	)	71
SYMBOL	{	71
IDENTIFIER	System	72
IDENTIFIER	out	72
IDENTIFIER	println	72
SYMBOL	(	72
STRING	"An error occurred while reading/writing the file: "	72
SYMBOL	+	72
IDENTIFIER	e	72
IDENTIFIER	getMessage	72
SYMBOL	(	72
SYMBOL	)	72
SYMBOL	)	72
SYMBOL	;	72
SYMBOL	}	73
IDENTIFIER	catch	73
SYMBOL	(	73
IDENTIFIER	Exception	73
IDENTIFIER	e	73
SYMBOL	)	73
SYMBOL	{	73
IDENTIFIER	System	74
IDENTIFIER	out	74
IDENTIFIER	println	74
SYMBOL	(	74
STRING	"An error occurred: "	74
SYMBOL	+	74
IDENTIFIER	e	74
IDENTIFIER	getMessage	74
SYMBOL	(	74
SYMBOL	)	74
SYMBOL	)	74
SYMBOL	;	74
SYMBOL	}	75
SYMBOL	}	76
IDENTIFIER	static	78
IDENTIFIER	class	78
IDENTIFIER	Token	78
SYMBOL	{	78
IDENTIFIER	private	79
IDENTIFIER	String	79
IDENTIFIER	type	79
SYMBOL	;	79
IDENTIFIER	private	80
IDENTIFIER	String	80
IDENTIFIER	lexeme	80
SYMBOL	;	80
IDENTIFIER	private	81
KEYWORD	int	81
IDENTIFIER	lineNumber	81
SYMBOL	;	81
IDENTIFIER	public	83
IDENTIFIER	Token	83
SYMBOL	(	83
IDENTIFIER	String	83
IDENTIFIER	type	83
SYMBOL	,	83
IDENTIFIER	String	83
IDENTIFIER	lexeme	83
SYMBOL	,	83
KEYWORD	int	83
IDENTIFIER	lineNumber	83
SYMBOL	)	83
SYMBOL	{	83
IDENTIFIER	this	84
IDENTIFIER	type	84
SYMBOL	=	84
IDENTIFIER	type	84
SYMBOL	;	84
IDENTIFIER	this	85
IDENTIFIER	lexeme	85
SYMBOL	=	85
IDENTIFIER	lexeme	85
SYMBOL	;	85
IDENTIFIER	this	86
IDENTIFIER	lineNumber	86
SYMBOL	=	86
IDENTIFIER	lineNumber	86
SYMBOL	;	86
SYMBOL	}	87
IDENTIFIER	public	89
IDENTIFIER	String	89
IDENTIFIER	getType	89
SYMBOL	(	89
SYMBOL	)	89
SYMBOL	{	89
KEYWORD	return	90
IDENTIFIER	type	90
SYMBOL	;	90
SYMBOL	}	91
IDENTIFIER	public	93
IDENTIFIER	String	93
IDENTIFIER	getLexeme	93
SYMBOL	(	93
SYMBOL	)	93
SYMBOL	{	93
KEYWORD	return	94
IDENTIFIER	lexeme	94
SYMBOL	;	94
SYMBOL	}	95
IDENTIFIER	public	97
KEYWORD	int	97
IDENTIFIER	getLineNumber	97
SYMBOL	(	97
SYMBOL	)	97
SYMBOL	{	97
KEYWORD	return	98
IDENTIFIER	lineNumber	98
SYMBOL	;	98
SYMBOL	}	99
SYMBOL	}	100
SYMBOL	}	101
